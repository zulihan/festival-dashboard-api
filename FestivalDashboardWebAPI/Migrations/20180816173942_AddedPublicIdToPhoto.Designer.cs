// <auto-generated />
using System;
using FestivalDashboardWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FestivalDashboardWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180816173942_AddedPublicIdToPhoto")]
    partial class AddedPublicIdToPhoto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhone");

                    b.Property<string>("Name");

                    b.Property<int>("OnRoad");

                    b.Property<int>("OnStage");

                    b.Property<string>("PhotoUrl");

                    b.Property<int?>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtistId");

                    b.Property<int>("DayNum");

                    b.HasKey("Id");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.GetIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtistId");

                    b.Property<int>("DayId");

                    b.Property<DateTime?>("End");

                    b.Property<DateTime?>("Start");

                    b.Property<int>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId")
                        .IsUnique();

                    b.ToTable("GetIns");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.SetUpWings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtistId");

                    b.Property<int>("DayId");

                    b.Property<DateTime?>("End");

                    b.Property<DateTime?>("Start");

                    b.Property<int>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId")
                        .IsUnique();

                    b.ToTable("SetUpWings");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtistId");

                    b.Property<int>("DayId");

                    b.Property<DateTime?>("End");

                    b.Property<DateTime?>("Start");

                    b.Property<int>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId")
                        .IsUnique();

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.SoundCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtistId");

                    b.Property<int>("DayId");

                    b.Property<DateTime?>("End");

                    b.Property<DateTime?>("Start");

                    b.Property<int>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId")
                        .IsUnique();

                    b.ToTable("SoundChecks");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Artist", b =>
                {
                    b.HasOne("FestivalDashboardWebAPI.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.GetIn", b =>
                {
                    b.HasOne("FestivalDashboardWebAPI.Models.Artist")
                        .WithOne("GetIn")
                        .HasForeignKey("FestivalDashboardWebAPI.Models.GetIn", "ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Photo", b =>
                {
                    b.HasOne("FestivalDashboardWebAPI.Models.User", "User")
                        .WithOne("Photo")
                        .HasForeignKey("FestivalDashboardWebAPI.Models.Photo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.SetUpWings", b =>
                {
                    b.HasOne("FestivalDashboardWebAPI.Models.Artist")
                        .WithOne("SetUpWings")
                        .HasForeignKey("FestivalDashboardWebAPI.Models.SetUpWings", "ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.Show", b =>
                {
                    b.HasOne("FestivalDashboardWebAPI.Models.Artist")
                        .WithOne("Show")
                        .HasForeignKey("FestivalDashboardWebAPI.Models.Show", "ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FestivalDashboardWebAPI.Models.SoundCheck", b =>
                {
                    b.HasOne("FestivalDashboardWebAPI.Models.Artist")
                        .WithOne("SoundCheck")
                        .HasForeignKey("FestivalDashboardWebAPI.Models.SoundCheck", "ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
